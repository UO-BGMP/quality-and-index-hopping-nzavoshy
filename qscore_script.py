#!/usr/bin/python


import argparse
import numpy as np


parser = argparse.ArgumentParser(description="index swapping assessment")

parser.add_argument("-f1", "--file1", help='sequence file 1',required=True,type= str)

parser.add_argument("-o", "--output_directory", help='output directory for quality score per count',required=True,type= str)
parser.add_argument("-o2", "--output_directory2", help='output directory for quality score per basepair',required=True,type= str)

args = parser.parse_args()

file1=args.file1

out=args.output_directory 
out2=args.output_directory2



values=[]
index_dict={}

mean_counts={}
for num in range(42): #generate a dictionary of zeroes from 0-41
	mean_counts[num]=0
for val in range(101): #generate a dictionary
	values.append(int(0))

print('beginning',flush=True)

with open(file1,'r') as fh:

    i=0
    for w in fh:

        
        i+=1

        
        w=w.strip('\n')  #strip the new lines
       
        if i % 4 ==0: #take every quality score line
            
            
            read_score=[] #generate an empty list
            
            n=0
            for c in w:
               
                phred=ord(c)-33 #calculate phred score
               
                values[n]+=phred #add the phred score to the values list in position 0-101, generating a sum
                #for each basepair
               
                read_score.append(phred) # append the phred score to the read_score list, which is a list of
                #all the quality scores generated by this read
                n+=1

                if i % 5000000 == 0: #if the number is divisible by 5,000,000 print what line it is on
                    print('working on' + str(i), flush=True)
                    break

            mean_read=int(np.mean(read_score)) #use numpy to calculate the mean of the  phred scores generated for that read
            avg_score=[]
            for thing in values:
            	av_score=thing/(i/4) #for each phred scores at positions, calculate the mean of that item and 
            	#append it to a list of the average at each position
            	avg_score.append(av_score)
            mean_counts[mean_read]+=1 #add the mean value of that read to the dictionary and increment it 
           
    print('writing quality scores per count to file', flush=True) #write the quality score per count to an output
    print(mean_read)
    for k,v in mean_counts.items():
        
        o=open(out, 'a+')
        o.write(str(k)+'\t'+str(v)+'\n')
    o.close()
    print('writing mean_quality scores per base pair', flush=True) #write the quality score per base pair to an output
    qs_bp_R2=open(out2, 'w+')
    qs_bp_R2.write(str(avg_score))
    qs_bp_R2.close()

#                 
                  #print('1 woohoo',thing)